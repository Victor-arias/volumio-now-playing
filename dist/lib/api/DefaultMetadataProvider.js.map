{"version":3,"file":"DefaultMetadataProvider.js","sourceRoot":"","sources":["../../../src/lib/api/DefaultMetadataProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import Genius, { Album, Artist, Song, TextFormat } from 'genius-fetch';\nimport { MetadataAlbumInfo, MetadataArtistInfo, MetadataSongInfo, NowPlayingMetadataProvider } from 'now-playing-common';\nimport np from '../NowPlayingContext';\n\nexport default class DefaultMetadataProvider implements NowPlayingMetadataProvider {\n\n  version: '1.0.0';\n\n  #genius: Genius;\n  #accessToken: string;\n\n  constructor() {\n    this.#genius = new Genius();\n  }\n\n  config(params: { accessToken: string }) {\n    this.version = '1.0.0';\n    this.#accessToken = params.accessToken;\n    this.#genius.config(params);\n  }\n\n  async getSongInfo(songTitle: string, albumTitle?: string, artistName?: string): Promise<MetadataSongInfo | null> {\n    if (!this.#accessToken) {\n      throw Error(np.getI18n('NOW_PLAYING_ERR_METADATA_NO_TOKEN'));\n    }\n    // Do not include album, as compilation albums tend to result in false hits\n    const matchParams = {\n      name: songTitle,\n      artist: artistName\n    };\n    const song = await this.#getSongByNameOrBestMatch(matchParams);\n    const songSnippet = this.#getSongSnippet(song);\n    const result: MetadataSongInfo = {\n      title: songTitle\n    };\n    if (song && songSnippet) {\n      const { title, description, image, embed } = songSnippet;\n      result.title = title;\n      result.description = description;\n      result.image = image;\n      if (song.artists && song.artists.primary) {\n        const artist = await this.#genius.getArtistById(song.artists.primary.id, { textFormat: TextFormat.Plain });\n        result.artist = this.#getArtistSnippet(artist);\n      }\n      if (embed) {\n        const embedContents = await this.#genius.parseSongEmbed(embed);\n        if (embedContents) {\n          result.lyrics = {\n            type: 'html',\n            lines: embedContents.contentParts.join()\n          };\n        }\n      }\n    }\n    // No song found, but still attempt to fetch artist info\n    else if (artistName) {\n      result.artist = await this.getArtistInfo(artistName);\n    }\n\n    // Finally, fetch album info\n    if (albumTitle) {\n      result.album = await this.getAlbumInfo(albumTitle, artistName);\n    }\n\n    return result;\n  }\n\n  async getAlbumInfo(albumTitle: string, artistName?: string): Promise<MetadataAlbumInfo | null> {\n    if (!this.#accessToken) {\n      throw Error(np.getI18n('NOW_PLAYING_ERR_METADATA_NO_TOKEN'));\n    }\n    const album = await this.#getAlbumByNameOrBestMatch({\n      name: albumTitle,\n      artist: artistName\n    });\n    const result = this.#getAlbumSnippet(album) || { title: albumTitle };\n    if (album && album.artist) {\n      const artist = await this.#genius.getArtistById(album.artist.id, { textFormat: TextFormat.Plain });\n      result.artist = this.#getArtistSnippet(artist);\n    }\n    return result;\n  }\n\n  async getArtistInfo(artistName: string): Promise<MetadataArtistInfo | null> {\n    if (!this.#accessToken) {\n      throw Error(np.getI18n('NOW_PLAYING_ERR_METADATA_NO_TOKEN'));\n    }\n    const artist = await this.#genius.getArtistsByName(artistName, { textFormat: TextFormat.Plain, obtainFullInfo: true, limit: 1 });\n    return this.#getArtistSnippet(artist.items[0]) || { name: artistName };\n  }\n\n  #getSongSnippet(info: Song | null): MetadataSongInfo & { embed?: string } | null {\n    if (!info) {\n      return null;\n    }\n    return {\n      title: info.title.regular,\n      description: info.description,\n      image: info.image,\n      embed: info.embed\n    };\n  }\n\n  #getAlbumSnippet(info: Album | null): MetadataAlbumInfo | null {\n    if (!info) {\n      return null;\n    }\n    return {\n      title: info.title.regular,\n      description: info.description,\n      releaseDate: info.releaseDate?.text,\n      image: info.image\n    };\n  }\n\n  #getArtistSnippet(info: Artist | null): MetadataArtistInfo | null{\n    if (!info) {\n      return null;\n    }\n    return {\n      name: info.name,\n      description: info.description,\n      image: info.image\n    };\n  }\n\n  async #getSongByNameOrBestMatch(params: { name: string; artist?: string; }) {\n    if (!params.name) {\n      return null;\n    }\n\n    if (params.artist) {\n      return this.#genius.getSongByBestMatch(\n        { ...params, artist: params.artist },\n        { textFormat: TextFormat.Plain, obtainFullInfo: true });\n    }\n\n    const song = await this.#genius.getSongsByName(\n      params.name,\n      { textFormat: TextFormat.Plain, obtainFullInfo: true, limit: 1 });\n\n    return song.items[0] || null;\n\n  }\n\n  async #getAlbumByNameOrBestMatch(params: { name: string; artist?: string; }) {\n    if (!params.name) {\n      return null;\n    }\n\n    if (params.artist) {\n      return this.#genius.getAlbumByBestMatch(\n        { ...params, artist: params.artist },\n        { textFormat: TextFormat.Plain, obtainFullInfo: true });\n    }\n\n    const album = await this.#genius.getAlbumsByName(\n      params.name,\n      { textFormat: TextFormat.Plain, obtainFullInfo: true, limit: 1 });\n\n    return album.items[0] || null;\n\n  }\n\n  clearCache() {\n    this.#genius.clearCache();\n  }\n}\n"]}